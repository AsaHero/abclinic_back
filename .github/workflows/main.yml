name: CI

env:
    REGISTRY: "registry.digitalocean.com/abclinic"
    IMAGE_NAME: "abclinic"
    CONTAINER_NAME: "abclinic-backend"

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main        
jobs:
    build:
        runs-on: ubuntu-22.04
        
        steps: 
            - name: Checkout master
              uses: actions/checkout@v3
            
            - name: Build container image
              run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

            - name: Install doctl
              uses: digitalocean/action-doctl@v2
              with:
                token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

            - name: Log in to DigitalOcean Container Registry with short-lived credentials
              run: doctl registry login --expiry-seconds 600

            - name: Push image to DigitalOcean Container Registry
              run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
    
    deploy:
        runs-on: ubuntu-22.04  
        needs: build
            
        steps:
            - name: Deploy to DigitalOcean droplet via SSH action
              uses: appleboy/ssh-action@v1.0.0
              with:
                host: ${{ secrets.HOST }}
                username: ${{ secrets.USERNAME }}
                password: ${{ secrets.PASSWORD }}
                port: ${{ secrets.PORT }}
                script: |
                  REGISTRY="registry.digitalocean.com/abclinic"
                  IMAGE_NAME="abclinic"
                  CONTAINER_NAME="abclinic-backend"
                  TAG="$(echo $GITHUB_SHA | head -c7)"

                  # Print out the variables to verify them
                  echo "Registry: $REGISTRY"
                  echo "Image Name: $IMAGE_NAME"
                  echo "Container Name: $CONTAINER_NAME"
                  echo "Tag: $TAG"
      
                  # Login to DigitalOcean Registry
                  docker login  -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} $REGISTRY
      
                  # Stop running container if exists
                  docker stop $CONTAINER_NAME || true
      
                  # Remove old container if exists
                  docker rm $CONTAINER_NAME || true

                  # Pull the new image
                  FULL_IMAGE_NAME="$REGISTRY/$IMAGE_NAME:$TAG"
                  echo "Pulling image: $FULL_IMAGE_NAME"
                  docker pull $FULL_IMAGE_NAME
      
                  # Pull the new image
                  docker pull $REGISTRY/$IMAGE_NAME:$TAG
      
                  # Run a new container from the new image
                  echo "Running image: $FULL_IMAGE_NAME"
                  docker run -d \
                  --restart always \
                  --publish 5000:80 \
                  --name $CONTAINER_NAME \
                  --env-file /root/credentials/$CONTAINER_NAME/.env \
                  $FULL_IMAGE_NAME
            
